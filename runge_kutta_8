#!/usr/bin/env python3

"""Runge-Kutta 8 method for low non-linear differential equations
Implemented for Python-OpenCL"""

import sys
import numpy as np
import pyopencl as cl
from mod_cmd.cmd_func import (menu_cmd, execution_kill, 
                              print_on_screen, time_stamp,
                              time_counter)
from mod_cmd.file_handler import read_from_file, write_to_file
from mod_opencl.opencl_class_device import OpenCL_Object

def matrix_generator(dim1, dim2, precision, random = True):
    if random:
        array = np.array([[np.random.random() for _ in range(dim2)] for _ in range(dim1)], dtype = precision)
    else:
        array = np.array([[0.0 for _ in range(dim2)] for _ in range(dim1)], dtype = precision)

    return array

def time_matrix_gen(dim1, dim2, _wp = np.float64):
    array = np.zeros((dim1, dim2), dtype = _wp)
    return array            


def print_arg(p_arguments, status = False):
    if status:
        print('\n', p_arguments, '\n')

def error_output(object_input):
    if np.sum(object_input.exit_condition) != 0:
        print("Error in column: (1 for error, 0 OK)")
        print(object_input.exit_condition)

def main():
    _wp = np.float64
    _step = _wp(100)
    _dimension = np.int32(10000)
    _dim1 = 512
    _vector_type = 4
    _local_size = 64
    _local_size_vector = _local_size*_vector_type
    _problem_dimension = _dim1

    time_list = []
    program_initial_time = time_stamp()

    arguments = menu_cmd()

    #Sets the file name from cmd option or default
    name_file_results = f"results_{program_initial_time}.dat"
    if arguments.file_name is not None:
        name_file_results = arguments.file_name

    value_i = _wp(arguments.initial_time)
    value_f_total = _wp(arguments.end_time)

    arg = int((value_f_total - value_i)/_step)

    value_f = value_i + _step

    OpenCL_Object_Instance = OpenCL_Object()
    OpenCL_Object_Instance.program("kernel_opencl/gpu.cl", ["-I kernel_opencl"])
    
    if arguments.initial_condition is None and not arguments.debug :
        matrix_in = matrix_generator(_dim1,_vector_type, _wp)

    elif arguments.debug:
        matrix_in = np.zeros((_dim1, _vector_type), dtype = _wp)
    else:
        matrix_in = read_from_file(arguments.initial_condition, 512, _wp)
    matrix_out = matrix_generator(_dim1, _vector_type, _wp, False)
    time_matrix_out = time_matrix_gen(512,1,_wp)
    exit_condition = matrix_generator(1,_dim1, np.int32, False) 

    #Ensures that device has enough global memory
    mem_safe_test = (matrix_in.nbytes + matrix_out.nbytes + 
                     time_matrix_out.nbytes + exit_condition.nbytes)

    Device_attrib = OpenCL_Object_Instance.attrib_for_exec[1]
    if mem_safe_test >= Device_attrib:
        print(f"Unable to allocate {mem_safe_test}. Max device mem {Device_attrib[1]}")
        sys.exit(-2)
    else:
        print(f"Total global mem allocated {mem_safe_test} Bytes, ({mem_safe_test/1024**2} MB)")

    OpenCL_Object_Instance.buffer_global(matrix_in, "matrix_in", False)
    OpenCL_Object_Instance.buffer_global(matrix_out, "matrix_out")
    OpenCL_Object_Instance.buffer_global(time_matrix_out, "time_matrix_out")
    OpenCL_Object_Instance.buffer_global(exit_condition, "exit_condition")
    OpenCL_Object_Instance.buffer_local(_local_size_vector,_wp(0).nbytes, "local_buffer")

#    with open(f"Integration{program_initial_time}.dat", "w") as file_all_steps:
    try:
        for value in range(arg):
            initial_ = time_counter()
            OpenCL_Object_Instance.kernel.runge_kutta_8(OpenCL_Object_Instance.queue, 
                                                 (_problem_dimension,), (_local_size,), 
                                                 OpenCL_Object_Instance.matrix_out_device,
                                                 OpenCL_Object_Instance.matrix_in_device,
                                                 _dimension, value_i, value_f, 
                                                 OpenCL_Object_Instance.local_buffer_device,
                                                 OpenCL_Object_Instance.exit_condition_device,
                                                 OpenCL_Object_Instance.time_matrix_out_device)
            OpenCL_Object_Instance.queue.finish()
            cl.enqueue_copy(OpenCL_Object_Instance.queue, 
                            OpenCL_Object_Instance.matrix_out,
                            OpenCL_Object_Instance.matrix_out_device)

            cl.enqueue_copy(OpenCL_Object_Instance.queue, 
                            OpenCL_Object_Instance.time_matrix_out,
                            OpenCL_Object_Instance.time_matrix_out_device)

            cl.enqueue_copy(OpenCL_Object_Instance.queue, 
                            OpenCL_Object_Instance.exit_condition,
                            OpenCL_Object_Instance.exit_condition_device)

            print_on_screen(value, arg, value_i, value_f, initial_, time_list, active = arguments.time_rem)
            error_output(OpenCL_Object_Instance)
            to_file = np.column_stack([OpenCL_Object_Instance.time_matrix_out, OpenCL_Object_Instance.matrix_out])
            print_arg(to_file, arguments.verbose)
            #< If every step of integration must be known. Uncomment and add a save file>
            #Replace the matrix_out(dimension, dim1) for a matrix_out(1, dim1). In kernel file replace 
            #vector_out[gid_0+ i* dimension] for vector_out[gid_0] outside for loop
            
            OpenCL_Object_Instance.buffer_global(OpenCL_Object_Instance.matrix_out, "matrix_in")
            value_i = value_f
            value_f += _step
            execution_kill()
    except StopIteration:
        interrupt_name = time_stamp()
        OpenCL_Object_Instance.free_buffer("matrix_in_device") #Release all buffers from device
        OpenCL_Object_Instance.free_buffer("matrix_out_device") #Release all buffers from device
        OpenCL_Object_Instance.free_buffer("time_matrix_out_device") #Release all buffers from device
        OpenCL_Object_Instance.free_buffer("exit_condition_device") #Release all buffers from device
        write_to_file(f"keyboard_interrupt_{interrupt_name}.dat", OpenCL_Object_Instance.matrix_out, value_i, 1)

        sys.exit(0)

    write_to_file(name_file_results, OpenCL_Object_Instance.matrix_out, value_i)
    OpenCL_Object_Instance.free_buffer("matrix_in_device") #Release all buffers from device
    OpenCL_Object_Instance.free_buffer("matrix_out_device") #Release all buffers from device
    OpenCL_Object_Instance.free_buffer("time_matrix_out_device") #Release all buffers from device
    OpenCL_Object_Instance.free_buffer("exit_condition_device") #Release all buffers from device
   
    sys.exit(0)

if __name__ == "__main__":
    main()
